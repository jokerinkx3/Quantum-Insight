
function App() {
  const [inputText, setInputText] = React.useState('');
  const [showAnalysis, setShowAnalysis] = React.useState(false);
  const [selectedState, setSelectedState] = React.useState(null);
  const [wavePhase, setWavePhase] = React.useState(0);

  React.useEffect(() => {
    const interval = setInterval(() => {
      setWavePhase(prev => (prev + 0.1) % (2 * Math.PI));
    }, 50);
    return () => clearInterval(interval);
  }, []);

  const quantumStates = [
    {
      emoji: "‚ùÑÔ∏è",
      type: "COLD",
      confidence: 0.85,
      description: "High certainty state",
      details: {
        evidence: ["Multiple peer-reviewed sources", "Empirical data"],
        implications: ["High reliability", "Strong foundation"],
        context: "Based on established research"
      }
    },
    {
      emoji: "üîÑ",
      type: "CAUSAL",
      confidence: 0.75,
      description: "Strong causal link",
      details: {
        relationship: "Direct influence observed",
        strength: "Strong bidirectional",
        factors: ["Temporal sequence", "Control variables"]
      }
    },
    {
      emoji: "‚ö°Ô∏è",
      type: "ENTANGLED",
      confidence: 0.95,
      description: "Quantum entanglement",
      details: {
        connection: "Strong correlation",
        reliability: "Highly consistent",
        impact: "Critical relationship"
      }
    },
    {
      emoji: "üåä",
      type: "SUPERPOSITION",
      confidence: 0.50,
      description: "Multiple states",
      details: {
        states: ["Primary", "Secondary", "Tertiary"],
        stability: "Variable",
        observation: "Context dependent"
      }
    }
  ];

  const generateWavePoints = (amplitude) => {
    const points = [];
    const width = 100;
    const height = 20;
    for (let x = 0; x <= width; x += 2) {
      const y = height/2 + Math.sin(x * 0.05 + wavePhase) * (height/2) * amplitude;
      points.push(`${x},${y}`);
    }
    return points.join(' ');
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      {/* Input Section */}
      <div className="mb-4">
        <div className="relative">
          <textarea
            className="w-full p-3 border rounded-lg resize-none"
            rows="4"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder="Enter your text..."
          />
          <button
            onClick={() => setShowAnalysis(!showAnalysis)}
            className="absolute bottom-2 right-2 bg-gray-100 hover:bg-gray-200 rounded-full p-2"
          >
            üîç
          </button>
        </div>
      </div>

      {showAnalysis && (
        <div>
          {/* Toolbar and Icons */}
          <div className="mb-4 bg-gray-50 rounded-lg p-3 shadow-sm">
            <div className="flex flex-wrap gap-3 items-center">
              <button 
                className="text-lg bg-white p-1 rounded-full shadow-sm hover:shadow-md"
                onClick={() => setShowAnalysis(false)}
              >
                ‚úï
              </button>
              {quantumStates.map((state, idx) => (
                <button 
                  key={idx}
                  className={`text-xl bg-white p-2 rounded-full shadow-sm hover:shadow-md transition-all ${
                    selectedState === idx ? 'ring-2 ring-blue-400' : ''
                  }`}
                  onClick={() => setSelectedState(selectedState === idx ? null : idx)}
                >
                  {state.emoji}
                </button>
              ))}
            </div>
          </div>

          {/* Visualization Dashboard */}
          {selectedState !== null && (
            <div className="grid gap-4">
              

              {/* Main State Card */}
              <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-100">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl animate-bounce">
                      {quantumStates[selectedState].emoji}
                    </span>
                    <h3 className="text-lg font-medium">
                      {quantumStates[selectedState].type}
                    </h3>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="h-6 w-24 bg-gray-100 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-blue-500 transition-all duration-500"
                        style={{ width: `${quantumStates[selectedState].confidence * 100}%` }}
                      />
                    </div>
                    <span className="text-sm text-gray-600">
                      {(quantumStates[selectedState].confidence * 100).toFixed()}%
                    </span>
                  </div>
                </div>

                <p className="text-gray-600 mb-4">
                  {quantumStates[selectedState].description}
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {Object.entries(quantumStates[selectedState].details).map(([key, value]) => (
                    <div key={key} className="bg-gray-50 p-3 rounded-lg">
                      <h4 className="font-medium text-gray-700 capitalize mb-2">{key}</h4>
                      {Array.isArray(value) ? (
                        <ul className="list-disc list-inside space-y-1">
                          {value.map((item, i) => (
                            <li key={i} className="text-gray-600">{item}</li>
                          ))}
                        </ul>
                      ) : (
                        <p className="text-gray-600">{value}</p>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              
            </div>
          )}
        </div>
      )}
    </div>
  );
}
